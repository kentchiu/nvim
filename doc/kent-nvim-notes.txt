*kent-nvim-notes.txt*	Kent Nvim Notes


		  Personal Nvim Tips    by Kent Chiu


Kent Nvim Tips					*kent*

                                      Type |gO| to see the table of contents.

==============================================================================
Userful Keymaps					*kent.keymaps*

大部分 <leader> 開頭的 keymaps 能觸發 |which-key.nvim.txt|  的 popup
window.比較不會被忽略, 然而有一些 keymap 不適用 <leader> key 觸發的,
如果沒有經常在使用就會忘記了,所以, 這邊把一些有用, 但是容易被忽略的keymaps
整理出來.


- `C-a`,`C-w`: Increment/Decrement (方便改版號), C-a 跟 tmux hotkey 衝突,
  連按兩次可以解決
- `ya` : Yank all in braces   
- `C-SPACE` : Expand selection.
- `vii`,`via`: 針對 text-object 做選擇,很方便
- `m`: Crete Fold
- LSP hover 連續觸發兩次後 'K K', cursor 會 focus float window,
  就可以當做一版的 window 操作
- `C-w w`: focus 到其他window 
- `<leader>fb`: list buffers

- <A-j>	Move Down	n, i, v
- <A-k>	Move Up	n, i, v
- <S-h>	Prev Buffer	n
- <S-l>	Next Buffer	n
- [b	Prev Buffer	n
- ]b	Next Buffer	n


有些 keymap 是在特定的 buffer (window) 裡面才有效的, ex: quicklist, 或者是
telescope 的 查詢 float window, neo-test 的 test summary window,
這些都有自己的 buffer scope keymaps, 而且只有foucs 停駐在特定的window
時才會生效. 這時,可以用 `:map` 或是 `:verbose map` 查 keymaps


------------------------------------------------------------------------------
		                    *kent.modes*

- n: Normal mode
- i: Insert mode
- x: Visual mode
- s: Select mode
- o: Operator-pending mode
- c: Command-line mode
- t: Terminal mode
- R: Replace mode
- ni: Insert-Normal mode
- ix: Insert-visual mode 
- is: Insert-select mode
- ex: Ex mode (Vim script mode)

Insert-normal mode (ni)：

  插入-正常模式是當處於插入模式並按下 Ctrl+O 時進入的臨時正常模式。在這個模式下，可以執行一個正常模式的命令，執行完後會自動返回插入模式。

Insert-visual mode (ix)：

  插入-可視模式是從插入模式轉到可視模式的過渡模式。這種模式很少使用，但它存在於 Vim 的模式列表中。

Insert-select mode (is)：

  插入-選擇模式是從插入模式轉到選擇模式的過渡模式。與插入-可視模式類似，也很少用到。

Ex mode (Vim script mode, ex)：

  Ex 模式是 Vim 的另一種命令模式，用戶可以編寫和執行 Vim 腳本。在這個模式下，編輯器只顯示一行，允許用戶輸入和執行長命令或腳本。 

------------------------------------------------------------------------------
		                    *kent.keymaps.ai*
- open close 選到的不同
- count 要加在 `a` ,`i` 前, ex: `v2ab`


Alias:

- b for braces
- q for quote
- ? for user prompt (左右可以不對稱)
- t for tag 
- f for function
- a for argument
- default: digits, punctuation, whitespace

extends by lazy:

- c for class
- d for digits
- e for word with case
- u for function usage  

>lua
  mappings = {
    -- Main textobject prefixes
    around = 'a',
    inside = 'i',

    -- Next/last variants
    around_next = 'an',
    inside_next = 'in',
    around_last = 'al',
    inside_last = 'il',

    -- Move cursor to corresponding edge of `a` textobject
    goto_left = 'g[',
    goto_right = 'g]',
  },

------------------------------------------------------------------------------
		                    *kent.keymaps.surround*
which key 在 operation padding 是會出現 `l`, `n` 的選項,如果沒有要用這兩個,
不要管它,直接用就可以了.

>lua
  add = 'sa', -- Add surrounding in Normal and Visual modes
    delete = 'sd', -- Delete surrounding
    find = 'sf', -- Find surrounding (to the right)
    find_left = 'sF', -- Find surrounding (to the left)
    highlight = 'sh', -- Highlight surrounding
    replace = 'sr', -- Replace surrounding
    update_n_lines = 'sn', -- Update `n_lines`

    suffix_last = 'l', -- Suffix to search with "prev" method
    suffix_next = 'n', -- Suffix to search with "next" method

------------------------------------------------------------------------------
		                    *kent.keymaps.lsp*

source: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/plugins/lsp/keymaps.lua

- <leader>cl	Lsp Info	n
- gd	Goto Definition	n
- gr	References	n
- gD	Goto Declaration	n
- gI	Goto Implementation	n
- gy	Goto T[y]pe Definition	n
- K	Hover	n
- gK	Signature Help	n
- <c-k>	Signature Help	i
- <leader>ca	Code Action	n, v
- <leader>cc	Run Codelens	n, v
- <leader>cC	Refresh & Display Codelens	n
- <leader>cA	Source Action	n
- ]]	Next Reference	n
- [[	Next Reference	n
- <leader>cr	Rename	n

------------------------------------------------------------------------------
		                    *kent.keymaps.flash*

Key	Description	Mode
<c-s>	Toggle Flash Search	c
r	Remote Flash	o
R	Treesitter Search	o, x
s	Flash	n, o, x
S	Flash Treesitter	n, o, x


------------------------------------------------------------------------------
		                    *kent.keymaps.copy-to-commandline*

1. `gw` or `*` to mark word on cursor
2. `:` to command-line mode
3. Press CTRL-r" to paste from default register

------------------------------------------------------------------------------
			                        *kent.keymaps.telescope*

- CTRL-/ :  Show mappings for picker actions (insert mode)
- `?` : Show mappings for picker actions (normal mode)  
- CTRL-q : Send all items not filtered to quickfixlist (qflist)
- ALT-q : Send all selected items to qflist 
- <ESC> or CTRL-[ : Enter normal mode

------------------------------------------------------------------------------
				                   *kent.keymaps.debug*

先要確定對應的 debugger lib 有安裝, python 需要安裝 'pydebug' 這個是跟 project
的其他 lib 在一起的, 不要安裝成 global 的.


config file 可以先使用 vscode 產生, 產生後要修改成標準的 json 格式 (去掉註解跟
tail common)


使用 `require('dap.ext.vscode').load_launchjs()` 載入 launch.json, 載入後用
<F5> (continu) 啟動 debugger,如果有成功配置, nvim 會的 debugger
啟動選項會有 configurations 裡面 name 裡面的值會出現在啟動的選項,選擇該選
項啟動即可.

- <F1>: step into 
- <F2>: step over
- <F3>: step out
- <F5>: continue


.vscode/launch.json example

>json
  {
      "version": "0.2.0",
      "configurations": [
	  {
	      "name": "Python: FastAPI",
	      "type": "python",
	      "request": "launch",
	      "module": "uvicorn",
	      "args": [
		  "chatgpt.main:app --reload --port 9999"
	      ],
	      "jinja": true,
	      "justMyCode": true
	  }
      ]
  }


------------------------------------------------------------------------------
				                 *kent.keymaps.neotest*


from |neotest.setup()|

>lua
    summary = {
      animated = true,
      enabled = true,
      expand_errors = true,
      follow = true,
      mappings = {
        attach = "a",
        clear_marked = "M",
        clear_target = "T",
        debug = "d",
        debug_marked = "D",
        expand = { "<CR>", "<2-LeftMouse>" },
        expand_all = "e",
        jumpto = "i",
        mark = "m",
        next_failed = "J",
        output = "o",
        prev_failed = "K",
        run = "r",
        run_marked = "R",
        short = "O",
        stop = "u",
        target = "t"
      },


------------------------------------------------------------------------------
				                 *kent.keymaps.trouble*
>lua
   action_keys = { -- key mappings for actions in the trouble list
        -- map to {} to remove a mapping, for example:
        -- close = {},
        close = "q", -- close the list
        cancel = "<esc>", -- cancel the preview and get back to your last window / buffer / cursor
        refresh = "r", -- manually refresh
        jump = {"<cr>", "<tab>"}, -- jump to the diagnostic or open / close folds
        open_split = { "<c-x>" }, -- open buffer in new split
        open_vsplit = { "<c-v>" }, -- open buffer in new vsplit
        open_tab = { "<c-t>" }, -- open buffer in new tab
        jump_close = {"o"}, -- jump to the diagnostic and close the list
        toggle_mode = "m", -- toggle between "workspace" and "document" diagnostics mode
        toggle_preview = "P", -- toggle auto_preview
        hover = "K", -- opens a small popup with the full multiline message
        preview = "p", -- preview the diagnostic location
        close_folds = {"zM", "zm"}, -- close all folds
        open_folds = {"zR", "zr"}, -- open all folds
        toggle_fold = {"zA", "za"}, -- toggle fold of current file
        previous = "k", -- previous item
        next = "j" -- next item
    },

==============================================================================
Diff	                 			*kent.diff*

1. 一個hunk 區塊, 還沒 cmmit 的undo -> mini toggle, 在那個 hunk 執行 `gH_` undelete current line hunk
2. 一個hunk 區塊, 已經 commit 的 undo
3. 一個檔案還沒 commit 的 undo,  :GRead, :G checkout -- <file>
4. 一個檔案已經 commit 的 undo
5. 一個檔案的異動 history, 可以會從 history 中 undo 一個 hunk
6. 一個檔案的異動 history, 可以會從 history 中退到那個版本
7. 列出目前還麼 commit 的檔案, :G
8. 顯示效果在 sign: mini.diff, gitsings


create a feature branch named fizzbuzz with :G switch -c fizzbuzz:


比較兩個檔案, 用 `vim diff file1 file2` 或者是,開兩個 vsplit window 後,
用 `diff this` command

有衝突時, 用 git mergetool 可以調用出 neovim 的 3-ways merge mode

------------------------------------------------------------------------------
		                    *kent.keymaps.issues*
目前遇到的狀況

1. mini.diff 的 toogle 只能比對還沒 commit 的檔案
2. DiffviewFileHistory % 只能比對已經 commit 的版本, 而且, 兩邊的無法異動


------------------------------------------------------------------------------
		                    *kent.keymaps.minidiff*
This module provides mappings for common actions with diffs, like:
- Apply and reset hunks.
- "Hunk range under cursor" textobject.
- Go to first/previous/next/last hunk range.

Examples:
- `vip` followed by `gh` / `gH` applies/resets hunks inside current paragraph. Same can be achieved in operator form `ghip` / `gHip`, which has the advantage of being dot-repeatable.
- `gh_` / `gH_` applies/resets current line (even if it is not a full hunk).
- `ghgh` / `gHgh` applies/resets hunk range under cursor.
- `dgh` deletes hunk range under cursor.
- `[H` / `[h` / `]h` / `]H` navigate cursor to the first / previous / next / last hunk range of the current buffer.

Mappings for some functionality are assumed to be done manually. See tag `*MiniDiff.operator()*` in help file.


------------------------------------------------------------------------------
		                    *kent.keymaps.diffvie- `:DiffviewOpen`
- `:DiffviewOpen HEAD~2`
- `:DiffviewOpen HEAD~4..HEAD~2`
- `:DiffviewOpen d4a7b0d`
- `:DiffviewOpen d4a7b0d^!`
- `:DiffviewOpen d4a7b0d..519b30e`
- `:DiffviewOpen origin/main...HEAD`


- `:DiffviewFileHistory`
- `:DiffviewFileHistory %`
- `:DiffviewFileHistory path/to/some/file.txt`
- `:DiffviewFileHistory path/to/some/directory`
- `:DiffviewFileHistory include/this and/this :!but/not/this`
- `:DiffviewFileHistory --range=origin..HEAD`
- `:DiffviewFileHistory --range=feat/example-branch`
- `:'<,'>DiffviewFileHistory`

https://github.com/sindrets/diffview.nvim/blob/main/README.md

- **Diff the index against a git rev:**
  - `DiffviewOpen HEAD~2 --cached`
  - Defaults to `HEAD` if no rev is given.


------------------------------------------------------------------------------
		                    *kent.keymaps.undo*

------------------------------------------------------------------------------
		                    *kent.keymaps.fugitive*

在 status view 裡面常用的資料有:

commit:

cc                      Create a commit.

ca                      Amend the last commit and edit the message. 
	  
			git commit --amend

			這個命令會重新提交上一次提交(commit id change)，
			可以修改提交信息並包含新暫存的更改。

			當你發現上一次提交有錯誤或遺漏，需要更正或補充內容時，
			可以使用這個命令。

cw                      Reword the last commit.

			git commit --amend --only

			用於重新編寫上一次提交的提交信息，但不改變提交的內容。
			這個命令只修改提交信息，不影響已提交的文件。

			這個命令只修改提交信息，不改變已提交的文件內容。

cvc                     Create a commit with -v. (帶 diff view)

cva                     Amend the last commit with -v. (帶 diff view)

crc                     Revert the commit under the cursor.


  Diff maps ~
                                                *fugitive_dp*
dp                      Invoke |:Git| diff on the file under the cursor.
                        Deprecated in favor of inline diffs.

                                                *fugitive_dd*
dd                      Perform a |:Gdiffsplit| on the file under the cursor.

                                                *fugitive_dq*
dq                      Close all but one diff buffer, and |:diffoff|! the
                        last one.

                                                *fugitive_d?*
d?                      Show this help.

==============================================================================
Commands	                 			*kent.commands*


查詢目前 buffer 的 LSP 有支援哪些功能 >vim

    :lua print(vim.inspect(vim.lsp.buf_get_clients()[1].resolved_capabilities)).

開啟/關閉 diagnostic >vim

    :lua vim.lsp.diagnostic.enable()
    :lua vim.lsp.diagnostic.disable()


------------------------------------------------------------------------------
						      *kent.search-and-replace*


1. telescope search and send to qlist
2. `:cdo s/foo/bar/gc`


  :grep foo
  :cdo s/foo/bar
  :cfdo update
`

update 是指將文件保存並更新。
因此，當你在 NeoVim 中執行 cfdo update 指令時，它會對當前打開的所有文件進行保存並更新操作。


==============================================================================
NVIM Config debug			         *kent.nvim-config-debug*

執行純淨版

`nvim -U none`


==============================================================================
MISC	                         			*kent.misc*

Text Object 裡面的 `word` 跟 `WORD` 的差別:

A word is... an almost C-style variable name.

– A consecutive string of characters containing only of letters, digits and 
  underscores.
– Can be modified through the 'iskeyword' option, if you are working with a 
  language that has slightly different specification of variable names!
– They are meant to indicate variable name and values!

A WORD is... what unix standard thinks is a word.

- A sequence of characters delimited by any kind of whitespace characters.


------------------------------------------------------------------------------
						      *kent.poetry*

開發 python 時, 在進入 nvim 前,需要先用 `poetry shell` 進入 virtual
environment, 不然 LSP 會抓不到對應的lib 跟 python interpretor, 另外在使用
terminal 時, 需要用 `source .venv/bin/activate` 啟動 terminal 內的 virtual
environment

這邊應該可以使用 autocmd 自動化這個過程


==============================================================================
Help 						*kent.help*

如果這個 help file 在 NVIM 裡面變成 readonly , 可以用 `setlocal modifiable`
讓它變成可以寫入


To rebuild this document:

Go to the "doc" folder and run the command `:helptags doc` . This will generate 
a "tags" file in the same folder. Once the file has been generated, the 
command `:help kent` should work.

Vim Doc syntax: |help-writing|


code block   >

>vim
  function xxx 
    ddefe
  endfunction


------------------------------------------------------------------------------
			         		  *kent.help.help-syntax*

- 標題：用 * 開頭和結尾的一行文字表示標題.
- 段落：用空行分隔的一段連續文字表示一個段落，每段文字應不超過 80 個字元。
- 清單：以 -、+、或 * 開頭的行表示清單項目。
- 程式碼區塊：用 `>syntax` 包住的詞彙或片語表示程式碼區塊.
- 強調：用 _ 包住的詞彙或片語表示需要強調的內容.
- 超連結：使用 | 包住的詞彙或片語表示超連結。

cheatsheet: https://devhints.io/vim-help

 vim:tw=78:ts=8:noet:ft=help:norl:
