return {
  -- {
  --   "zbirenbaum/copilot.lua",
  --   cmd = "Copilot",
  --   build = ":Copilot auth",
  --   event = "InsertEnter",
  --   config = function(_, opts)
  --     require("copilot").setup({
  --       panel = {
  --         enabled = false,
  --         auto_refresh = false,
  --         keymap = {
  --           jump_prev = "[[",
  --           jump_next = "]]",
  --           accept = "<CR>",
  --           refresh = "gr",
  --           open = "<M-CR>",
  --         },
  --         layout = {
  --           position = "bottom", -- | top | left | right
  --           ratio = 0.4,
  --         },
  --       },
  --       suggestion = {
  --         enabled = true,
  --         auto_trigger = true,
  --         hide_during_completion = true,
  --         debounce = 75,
  --         keymap = {
  --           accept = "<C-y>",
  --           accept_word = false,
  --           accept_line = false,
  --           next = "<C-n>",
  --           prev = "<C-p>",
  --           dismiss = "<C-x>",
  --         },
  --       },
  --       filetypes = {
  --         yaml = false,
  --         markdown = false,
  --         help = false,
  --         gitcommit = false,
  --         gitrebase = false,
  --         hgcommit = false,
  --         svn = false,
  --         cvs = false,
  --         ["."] = false,
  --       },
  --       copilot_node_command = "node", -- Node.js version must be > 18.x
  --       server_opts_overrides = {},
  --     })
  --   end,
  -- },
  --
  -- {
  --   "yetone/avante.nvim",
  --   event = "VeryLazy",
  --   lazy = false,
  --   version = false, -- set this if you want to always pull the latest change
  --   opts = {
  --     debug = true,
  --     ---@alias Provider "claude" | "openai" | "azure" | "gemini" | "cohere" | "copilot" | string
  --     provider = "claude", -- Recommend using Claude
  --     auto_suggestions_provider = "copilot", -- Since auto-suggestions are a high-frequency operation and therefore expensive, it is recommended to specify an inexpensive provider or even a free provider: copilot
  --     ---@alias Tokenizer "tiktoken" | "hf"
  --     -- Used for counting tokens and encoding text.
  --     -- By default, we will use tiktoken.
  --     -- For most providers that we support we will determine this automatically.
  --     -- If you wish to use a given implementation, then you can override it here.
  --     tokenizer = "tiktoken",
  --     ---@type AvanteSupportedProvider
  --     openai = {
  --       endpoint = "https://api.openai.com/v1",
  --       model = "gpt-4o",
  --       timeout = 30000, -- Timeout in milliseconds
  --       temperature = 0,
  --       max_tokens = 4096,
  --       ["local"] = false,
  --     },
  --     ---@type AvanteSupportedProvider
  --     copilot = {
  --       endpoint = "https://api.githubcopilot.com",
  --       model = "gpt-4o-2024-05-13",
  --       proxy = nil, -- [protocol://]host[:port] Use this proxy
  --       allow_insecure = false, -- Allow insecure server connections
  --       timeout = 30000, -- Timeout in milliseconds
  --       temperature = 0,
  --       max_tokens = 4096,
  --     },
  --     ---@type AvanteAzureProvider
  --     azure = {
  --       endpoint = "", -- example: "https://<your-resource-name>.openai.azure.com"
  --       deployment = "", -- Azure deployment name (e.g., "gpt-4o", "my-gpt-4o-deployment")
  --       api_version = "2024-06-01",
  --       timeout = 30000, -- Timeout in milliseconds
  --       temperature = 0,
  --       max_tokens = 4096,
  --       ["local"] = false,
  --     },
  --     ---@type AvanteSupportedProvider
  --     claude = {
  --       endpoint = "https://api.anthropic.com",
  --       model = "claude-3-5-sonnet-20241022",
  --       timeout = 30000, -- Timeout in milliseconds
  --       temperature = 0,
  --       max_tokens = 8000,
  --       ["local"] = false,
  --     },
  --     ---@type AvanteSupportedProvider
  --     gemini = {
  --       endpoint = "https://generativelanguage.googleapis.com/v1beta/models",
  --       model = "gemini-1.5-flash-latest",
  --       timeout = 30000, -- Timeout in milliseconds
  --       temperature = 0,
  --       max_tokens = 4096,
  --       ["local"] = false,
  --     },
  --     ---@type AvanteSupportedProvider
  --     cohere = {
  --       endpoint = "https://api.cohere.com/v2",
  --       model = "command-r-plus-08-2024",
  --       timeout = 30000, -- Timeout in milliseconds
  --       temperature = 0,
  --       max_tokens = 4096,
  --       ["local"] = false,
  --     },
  --     ---To add support for custom provider, follow the format below
  --     ---See https://github.com/yetone/avante.nvim/wiki#custom-providers for more details
  --     ---@type {[string]: AvanteProvider}
  --     vendors = {
  --       ---@type AvanteSupportedProvider
  --       ["claude-haiku"] = {
  --         endpoint = "https://api.anthropic.com",
  --         model = "claude-3-5-haiku-20241022",
  --         timeout = 30000, -- Timeout in milliseconds
  --         temperature = 0,
  --         max_tokens = 8000,
  --         ["local"] = false,
  --       },
  --       ---@type AvanteSupportedProvider
  --       ["claude-opus"] = {
  --         endpoint = "https://api.anthropic.com",
  --         model = "claude-3-opus-20240229",
  --         timeout = 30000, -- Timeout in milliseconds
  --         temperature = 0,
  --         max_tokens = 8000,
  --         ["local"] = false,
  --       },
  --     },
  --     ---Specify the behaviour of avante.nvim
  --     ---1. auto_apply_diff_after_generation: Whether to automatically apply diff after LLM response.
  --     ---                                     This would simulate similar behaviour to cursor. Default to false.
  --     ---2. auto_set_keymaps                : Whether to automatically set the keymap for the current line. Default to true.
  --     ---                                     Note that avante will safely set these keymap. See https://github.com/yetone/avante.nvim/wiki#keymaps-and-api-i-guess for more details.
  --     ---3. auto_set_highlight_group        : Whether to automatically set the highlight group for the current line. Default to true.
  --     ---4. support_paste_from_clipboard    : Whether to support pasting image from clipboard. This will be determined automatically based whether img-clip is available or not.
  --     behaviour = {
  --       auto_suggestions = false, -- Experimental stage
  --       auto_set_highlight_group = true,
  --       auto_set_keymaps = true,
  --       auto_apply_diff_after_generation = false,
  --       support_paste_from_clipboard = false,
  --     },
  --     history = {
  --       max_tokens = 4096,
  --       storage_path = vim.fn.stdpath("state") .. "/avante",
  --       paste = {
  --         extension = "png",
  --         filename = "pasted-%Y-%m-%d-%H-%M-%S",
  --       },
  --     },
  --     highlights = {
  --       ---@type AvanteConflictHighlights
  --       diff = {
  --         current = "DiffText",
  --         incoming = "DiffAdd",
  --       },
  --     },
  --     mappings = {
  --       ---@class AvanteConflictMappings
  --       diff = {
  --         ours = "co",
  --         theirs = "ct",
  --         all_theirs = "ca",
  --         both = "cb",
  --         cursor = "cc",
  --         next = "]x",
  --         prev = "[x",
  --       },
  --       suggestion = {
  --         accept = "<C-y>",
  --         next = "<C-n>",
  --         prev = "<C-p>",
  --         dismiss = "<C-x>",
  --       },
  --       jump = {
  --         next = "]]",
  --         prev = "[[",
  --       },
  --       submit = {
  --         normal = "<CR>",
  --         insert = "<C-s>",
  --       },
  --       -- NOTE: The following will be safely set by avante.nvim
  --       ask = "<leader>aa",
  --       edit = "<leader>ae",
  --       refresh = "<leader>ar",
  --       focus = "<leader>af",
  --       toggle = {
  --         default = "<leader>at",
  --         debug = "<leader>ad",
  --         hint = "<leader>ah",
  --         suggestion = "<leader>as",
  --         repomap = "<leader>aR",
  --       },
  --       sidebar = {
  --         apply_all = "A",
  --         apply_cursor = "a",
  --         switch_windows = "<Tab>",
  --         reverse_switch_windows = "<S-Tab>",
  --       },
  --     },
  --     windows = {
  --       ---@alias AvantePosition "right" | "left" | "top" | "bottom" | "smart"
  --       position = "right",
  --       wrap = true, -- similar to vim.o.wrap
  --       width = 30, -- default % based on available width in vertical layout
  --       height = 30, -- default % based on available height in horizontal layout
  --       sidebar_header = {
  --         enabled = true, -- true, false to enable/disable the header
  --         align = "center", -- left, center, right for title
  --         rounded = true,
  --       },
  --       input = {
  --         prefix = "> ",
  --         height = 8, -- Height of the input window in vertical layout
  --       },
  --       edit = {
  --         border = "rounded",
  --         start_insert = true, -- Start insert mode when opening the edit window
  --       },
  --       ask = {
  --         floating = false, -- Open the 'AvanteAsk' prompt in a floating window
  --         border = "rounded",
  --         start_insert = true, -- Start insert mode when opening the ask window
  --         ---@alias AvanteInitialDiff "ours" | "theirs"
  --         focus_on_apply = "ours", -- which diff to focus after applying
  --       },
  --     },
  --     --- @class AvanteConflictConfig
  --     diff = {
  --       autojump = true,
  --       --- Override the 'timeoutlen' setting while hovering over a diff (see :help timeoutlen).
  --       --- Helps to avoid entering operator-pending mode with diff mappings starting with `c`.
  --       --- Disable by setting to -1.
  --       override_timeoutlen = 500,
  --     },
  --     --- @class AvanteHintsConfig
  --     hints = {
  --       enabled = true,
  --     },
  --     --- @class AvanteRepoMapConfig
  --     repo_map = {
  --       ignore_patterns = { "%.git", "%.worktree", "__pycache__", "node_modules" }, -- ignore files matching these
  --     },
  --   },
  --   -- if you want to build from source then do `make BUILD_FROM_SOURCE=true`
  --   build = "make",
  --   -- build = "powershell -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false" -- for windows
  --   dependencies = {
  --     "stevearc/dressing.nvim",
  --     "nvim-lua/plenary.nvim",
  --     "MunifTanjim/nui.nvim",
  --     "echasnovski/mini.icons",
  --     "zbirenbaum/copilot.lua",
  --     {
  --       -- support for image pasting
  --       "HakonHarnes/img-clip.nvim",
  --       event = "VeryLazy",
  --       opts = {
  --         -- recommended settings
  --         default = {
  --           embed_image_as_base64 = false,
  --           prompt_for_file_name = false,
  --           drag_and_drop = {
  --             insert_mode = true,
  --           },
  --           -- required for Windows users
  --           use_absolute_path = true,
  --         },
  --       },
  --     },
  --     {
  --       -- Make sure to set this up properly if you have lazy=true
  --       "MeanderingProgrammer/render-markdown.nvim",
  --       opts = {
  --         file_types = { "markdown", "Avante" },
  --       },
  --       ft = { "markdown", "Avante" },
  --     },
  --   },
  -- },
  -- {
  --   "olimorris/codecompanion.nvim",
  --   enabled = false,
  --   keys = {
  --     { "<leader>ai", "<cmd>CodeCompanion<cr>", mode = { "n", "v" }, desc = "[CC]Inline assistant" },
  --     { "<leader>ac", "<cmd>CodeCompanionChat<cr>", mode = { "n", "v" }, desc = "[CC]Chat buffer" },
  --     { "<leader>ap", "<cmd>CodeCompanionActions<cr>", mode = { "n", "v" }, desc = "[CC]Action Palette" },
  --   },
  --   dependencies = {
  --     "nvim-lua/plenary.nvim",
  --     "nvim-treesitter/nvim-treesitter",
  --     -- "hrsh7th/nvim-cmp", -- Optional: For using slash commands and variables in the chat buffer
  --     "nvim-telescope/telescope.nvim", -- Optional: For using slash commands
  --     { "stevearc/dressing.nvim", opts = {} }, -- Optional: Improves `vim.ui.select`
  --   },
  --   config = function(_, opts)
  --     require("codecompanion").setup({
  --       strategies = {
  --         chat = {
  --           adapter = "anthropic",
  --         },
  --         inline = {
  --           adapter = "anthropic",
  --         },
  --         agent = {
  --           adapter = "anthropic",
  --         },
  --       },
  --     })
  --   end,
  -- },
  --
  --

  -- {
  --   "zbirenbaum/copilot.lua",
  --   opts = {
  --     suggestion = {
  --       enabled = not vim.g.ai_cmp,
  --       auto_trigger = true,
  --       keymap = {
  --         accept = false, -- handled by nvim-cmp / blink.cmp
  --         next = "<M-]>",
  --         prev = "<M-[>",
  --       },
  --     },
  --     panel = { enabled = false },
  --     filetypes = {
  --       markdown = true,
  --       help = true,
  --     },
  --   },
  -- },
  -- {
  --   "CopilotC-Nvim/CopilotChat.nvim",
  --   branch = "canary",
  --   cmd = "CopilotChat",
  --   opts = function()
  --     local user = vim.env.USER or "User"
  --     user = user:sub(1, 1):upper() .. user:sub(2)
  --     return {
  --       auto_insert_mode = true,
  --       question_header = "  " .. user .. " ",
  --       answer_header = "  Copilot ",
  --       window = {
  --         width = 0.4,
  --       },
  --     }
  --   end,
  --   keys = {
  --     { "<c-s>", "<CR>", ft = "copilot-chat", desc = "Submit Prompt", remap = true },
  --     { "<leader>a", "", desc = "+ai", mode = { "n", "v" } },
  --     {
  --       "<leader>aa",
  --       function()
  --         return require("CopilotChat").toggle()
  --       end,
  --       desc = "Toggle (CopilotChat)",
  --       mode = { "n", "v" },
  --     },
  --     {
  --       "<leader>ax",
  --       function()
  --         return require("CopilotChat").reset()
  --       end,
  --       desc = "Clear (CopilotChat)",
  --       mode = { "n", "v" },
  --     },
  --     {
  --       "<leader>aq",
  --       function()
  --         local input = vim.fn.input("Quick Chat: ")
  --         if input ~= "" then
  --           require("CopilotChat").ask(input)
  --         end
  --       end,
  --       desc = "Quick Chat (CopilotChat)",
  --       mode = { "n", "v" },
  --     },
  --     -- Show prompts actions with telescope
  --     { "<leader>ap", M.pick("prompt"), desc = "Prompt Actions (CopilotChat)", mode = { "n", "v" } },
  --   },
  --   config = function(_, opts)
  --     local chat = require("CopilotChat")
  --
  --     vim.api.nvim_create_autocmd("BufEnter", {
  --       pattern = "copilot-chat",
  --       callback = function()
  --         vim.opt_local.relativenumber = false
  --         vim.opt_local.number = false
  --       end,
  --     })
  --
  --     chat.setup(opts)
  --   end,
  -- },
  {
    "CopilotC-Nvim/CopilotChat.nvim",
    opts = {
      debug = true,
      log_level = "trace",
    },
  },
}
